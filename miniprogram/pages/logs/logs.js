"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./../../utils/util");
Page({
    data: {
        recordData: [],
        mpg: 0,
        costPK: 0,
        deleteIndex: -1,
        confirmShow: false
    },
    getLogs: function () {
        var _a;
        try {
            var arr = wx.getStorageSync('recordData') || [];
            this.setData((_a = {},
                _a["recordData"] = arr.sort(util_1.compare('km')),
                _a));
            this.calculateTotal();
        }
        catch (e) {
        }
    },
    calculateTotal: function () {
        var _a;
        var recordData = this.data.recordData;
        var totalKm = 0;
        var totalFill = 0;
        var totalCost = 0;
        if (this.data.recordData.length > 0) {
            var firstKM = Number(recordData[recordData.length - 1].km);
            var lastKM = Number(recordData[0].km);
            totalKm = lastKM - firstKM;
            for (var index = 0; index < recordData.length; index++) {
                var item = recordData[index];
                if (index > 0) {
                    totalFill += Number(item.fill);
                    totalCost += Number(item.amount);
                }
            }
        }
        var mpg = Number(util_1.formatToFixed(totalFill / totalKm * 100, 2));
        var costPK = Number(util_1.formatToFixed(totalCost / totalKm, 2));
        this.setData((_a = {},
            _a["mpg"] = (isNaN(mpg) ? 0 : mpg),
            _a["costPK"] = (isNaN(costPK) ? 0 : costPK),
            _a));
    },
    submit: function () {
        try {
            wx.setStorageSync('recordData', this.data.recordData);
            this.getLogs();
        }
        catch (e) { }
    },
    deleteItem: function (e) {
        var _a;
        this.data.deleteIndex = e.currentTarget.dataset.index;
        this.setData((_a = {},
            _a["confirmShow"] = true,
            _a));
    },
    tapDialogButton: function (e) {
        console.log(e);
        this.setData({
            confirmShow: false
        });
        if (e.detail.index === 1) {
            this.confirmDelete();
        }
        else {
            this.cancelDelete();
        }
    },
    confirmDelete: function () {
        this.data.recordData.splice(this.data.deleteIndex, 1);
        this.submit();
    },
    cancelDelete: function () {
        this.data.deleteIndex = -1;
    },
    navigateTo: function (url) {
        wx.navigateTo({ url: url });
    },
    onShow: function () {
        this.getLogs();
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwyQ0FBMkQ7QUFPM0QsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osVUFBVSxFQUFFLEVBQUU7UUFDZCxHQUFHLEVBQUUsQ0FBQztRQUNOLE1BQU0sRUFBRSxDQUFDO1FBQ1QsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNmLFdBQVcsRUFBRSxLQUFLO0tBQ25CO0lBQ0QsT0FBTzs7UUFDTCxJQUFJO1lBQ0YsSUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDakQsSUFBSSxDQUFDLE9BQU87Z0JBQ1YsR0FBQyxZQUFZLElBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3ZDLENBQUE7WUFDRixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUE7U0FDdEI7UUFBQyxPQUFPLENBQUMsRUFBRTtTQUVYO0lBQ0gsQ0FBQztJQUNELGNBQWM7O1FBQ1osSUFBTSxVQUFVLEdBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUE7UUFDakQsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFBO1FBQ2YsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFBO1FBQ2pCLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQTtRQUNqQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbkMsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQzFELElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDckMsT0FBTyxHQUFHLE1BQU0sR0FBRyxPQUFPLENBQUE7WUFDMUIsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQ3RELElBQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDL0IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO29CQUNiLFNBQVMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO29CQUM5QixTQUFTLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtpQkFDakM7YUFDRjtTQUNGO1FBQ0QsSUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLG9CQUFhLENBQUMsU0FBUyxHQUFHLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUMvRCxJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsb0JBQWEsQ0FBQyxTQUFTLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDNUQsSUFBSSxDQUFDLE9BQU87WUFDVixHQUFDLEtBQUssSUFBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDL0IsR0FBQyxRQUFRLElBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO2dCQUN4QyxDQUFBO0lBQ0osQ0FBQztJQUNELE1BQU07UUFDSixJQUFJO1lBQ0YsRUFBRSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUNyRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUE7U0FDZjtRQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUc7SUFDakIsQ0FBQztJQUNELFVBQVUsWUFBRSxDQUFNOztRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUE7UUFDckQsSUFBSSxDQUFDLE9BQU87WUFDVixHQUFDLGFBQWEsSUFBRyxJQUFJO2dCQUNyQixDQUFBO0lBQ0osQ0FBQztJQUNELGVBQWUsWUFBRSxDQUFNO1FBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsV0FBVyxFQUFFLEtBQUs7U0FDbkIsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxDQUFDLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBO1NBQ3JCO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUE7U0FDcEI7SUFDSCxDQUFDO0lBQ0QsYUFBYTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUNyRCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7SUFDZixDQUFDO0lBQ0QsWUFBWTtRQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQzVCLENBQUM7SUFDRCxVQUFVLFlBQUUsR0FBVztRQUNyQixFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDN0IsQ0FBQztJQUNELE1BQU07UUFDSixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDaEIsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGxvZ3MudHNcbmltcG9ydCB7IGZvcm1hdFRvRml4ZWQsIGNvbXBhcmUgfSBmcm9tICcuLy4uLy4uL3V0aWxzL3V0aWwnXG5pbnRlcmZhY2UgUmVjb3JkIHtcbiAga206IHN0cmluZztcbiAgZmlsbDogc3RyaW5nO1xuICBhbW91bnQ6IHN0cmluZztcbiAgZGF0ZTogc3RyaW5nO1xufVxuUGFnZSh7XG4gIGRhdGE6IHtcbiAgICByZWNvcmREYXRhOiBbXSwgLy8g5oiR55qE6K6w5b2VXG4gICAgbXBnOiAwLCAvLyDnmb7lhazph4zmsrnogJdcbiAgICBjb3N0UEs6IDAsIC8vIOavj+WFrOmHjOiAl+i0uVxuICAgIGRlbGV0ZUluZGV4OiAtMSwgLy8g5Yig6Zmk5pe25Li05pe25L+d5a2Y57Si5byV5YC8XG4gICAgY29uZmlybVNob3c6IGZhbHNlIC8vIOaYvuekuuehruiupOW8ueahhlxuICB9LFxuICBnZXRMb2dzICgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYXJyID0gd3guZ2V0U3RvcmFnZVN5bmMoJ3JlY29yZERhdGEnKSB8fCBbXVxuICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgW2ByZWNvcmREYXRhYF06IGFyci5zb3J0KGNvbXBhcmUoJ2ttJykpXG4gICAgICB9KVxuICAgICAgdGhpcy5jYWxjdWxhdGVUb3RhbCgpIC8vIOiuoeeul+aAu+WAvFxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIERvIHNvbWV0aGluZyB3aGVuIGNhdGNoIGVycm9yXG4gICAgfVxuICB9LFxuICBjYWxjdWxhdGVUb3RhbCAoKSB7IC8vIOiuoeeul+aAu+WAvFxuICAgIGNvbnN0IHJlY29yZERhdGE6IFJlY29yZFtdID0gdGhpcy5kYXRhLnJlY29yZERhdGFcbiAgICBsZXQgdG90YWxLbSA9IDAgLy8g5oC75YWs6YeM5pWwXG4gICAgbGV0IHRvdGFsRmlsbCA9IDAgLy8g5oC75Yqg5rK56YePXG4gICAgbGV0IHRvdGFsQ29zdCA9IDAgLy8g5oC76ICX6LS5XG4gICAgaWYgKHRoaXMuZGF0YS5yZWNvcmREYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCBmaXJzdEtNID0gTnVtYmVyKHJlY29yZERhdGFbcmVjb3JkRGF0YS5sZW5ndGggLSAxXS5rbSlcbiAgICAgIGxldCBsYXN0S00gPSBOdW1iZXIocmVjb3JkRGF0YVswXS5rbSlcbiAgICAgIHRvdGFsS20gPSBsYXN0S00gLSBmaXJzdEtNXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmVjb3JkRGF0YS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHJlY29yZERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgdG90YWxGaWxsICs9IE51bWJlcihpdGVtLmZpbGwpXG4gICAgICAgICAgdG90YWxDb3N0ICs9IE51bWJlcihpdGVtLmFtb3VudClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtcGcgPSBOdW1iZXIoZm9ybWF0VG9GaXhlZCh0b3RhbEZpbGwgLyB0b3RhbEttICogMTAwLCAyKSlcbiAgICBjb25zdCBjb3N0UEsgPSBOdW1iZXIoZm9ybWF0VG9GaXhlZCh0b3RhbENvc3QgLyB0b3RhbEttLCAyKSlcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgW2BtcGdgXTogKGlzTmFOKG1wZykgPyAwIDogbXBnKSwgIC8vIOiuoeeul+eZvuWFrOmHjOayueiAl1xuICAgICAgW2Bjb3N0UEtgXTogKGlzTmFOKGNvc3RQSykgPyAwIDogY29zdFBLKSAgLy8g6K6h566X5q+P5YWs6YeM6ICX6LS5XG4gICAgfSlcbiAgfSxcbiAgc3VibWl0ICgpIHsgLy8g5L+d5a2YXG4gICAgdHJ5IHtcbiAgICAgIHd4LnNldFN0b3JhZ2VTeW5jKCdyZWNvcmREYXRhJywgdGhpcy5kYXRhLnJlY29yZERhdGEpXG4gICAgICB0aGlzLmdldExvZ3MoKVxuICAgIH0gY2F0Y2ggKGUpIHsgfVxuICB9LFxuICBkZWxldGVJdGVtIChlOiBhbnkpIHsgLy8g5Yig6Zmk5pys5p2hXG4gICAgdGhpcy5kYXRhLmRlbGV0ZUluZGV4ID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaW5kZXhcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgW2Bjb25maXJtU2hvd2BdOiB0cnVlICAvLyDmmL7npLrnoa7orqTmoYZcbiAgICB9KVxuICB9LFxuICB0YXBEaWFsb2dCdXR0b24gKGU6IGFueSkgeyAvLyDngrnlh7vnoa7orqTmoYbmjInpkq5cbiAgICBjb25zb2xlLmxvZyhlKVxuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBjb25maXJtU2hvdzogZmFsc2VcbiAgICB9KVxuICAgIGlmIChlLmRldGFpbC5pbmRleCA9PT0gMSkgeyAvLyBidXR0b25z57Si5byV5YC877yIMOWPlua2iCAgMeehruWumu+8iVxuICAgICAgdGhpcy5jb25maXJtRGVsZXRlKCkgLy8g56Gu6K6k5Yig6ZmkXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2FuY2VsRGVsZXRlKCkgLy8g5Y+W5raI5Yig6ZmkXG4gICAgfVxuICB9LFxuICBjb25maXJtRGVsZXRlICgpIHsgLy8g56Gu6K6k5Yig6ZmkXG4gICAgdGhpcy5kYXRhLnJlY29yZERhdGEuc3BsaWNlKHRoaXMuZGF0YS5kZWxldGVJbmRleCwgMSlcbiAgICB0aGlzLnN1Ym1pdCgpXG4gIH0sXG4gIGNhbmNlbERlbGV0ZSAoKSB7IC8vIOWPlua2iOWIoOmZpFxuICAgIHRoaXMuZGF0YS5kZWxldGVJbmRleCA9IC0xXG4gIH0sXG4gIG5hdmlnYXRlVG8gKHVybDogc3RyaW5nKSB7XG4gICAgd3gubmF2aWdhdGVUbyh7IHVybDogdXJsIH0pXG4gIH0sXG4gIG9uU2hvdygpIHtcbiAgICB0aGlzLmdldExvZ3MoKVxuICB9XG59KVxuIl19